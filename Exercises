
## Exercise2222---------------------------------------------------------------

## clear data and variables  
rm(list=ls())

##---------------------------------------------------------------
## Melbourne House   
##---------------------------------------------------------------
## read data 
DATA1 = read.csv(file="house_MEL.csv", header=TRUE, sep=",")

## names 
names(DATA1)

## summary
summary(DATA1)

## mean and median  
mean(DATA1$price)
median(DATA1$price)

## histogram  
hist(DATA1$price)

## histogram by ggplot2
library(ggplot2)

## (1) histogram 
ggplot(data=DATA1, aes(price)) + 
  geom_histogram(binwidth=500000, colour="black", fill="skyblue") +  
  labs(title = "Housing Prices in Melbourne", x = "Housing Price (dollars)") +
  theme(plot.title = element_text(hjust = 0.5)) 

## (2) histogram with mean and median 
v_mean = mean(DATA1$price)
v_med  = median(DATA1$price)

ggplot(data=DATA1, aes(price)) + 
  geom_histogram(binwidth=500000, colour="black", fill="skyblue") +  
  labs(title = "Housing Prices in Melbourne", x = "Housing Price (dollars)") +
  theme(plot.title = element_text(hjust = 0.5)) +
  geom_vline(xintercept = v_mean, color="red" , size=1)+
  geom_vline(xintercept = v_med,  color="blue", size=1) +
  annotate("text", x = v_mean, y = 2500, angle = 90, label = "Mean",   color = "red", vjust = 1.2, parse = TRUE)+
  annotate("text", x = v_med,  y = 5000, angle = 90, label = "Median", color = "blue", vjust = 1.2, parse = TRUE)


##---------------------------------------------------------------
## ASX  
##---------------------------------------------------------------
## read data 
DATA2 = read.csv(file="AXJO.csv", header=TRUE, sep=",")

## summary
summary(DATA2)

## data format 
DATA2$Date = as.Date(DATA2$Date, format="%Y-%m-%d")

## summary: check again 
summary(DATA2)

## time series plot 
ggplot(DATA2, aes(x=Date, y=Open)) +
  geom_line(color = "#FC4E07", size = 2) + 
  xlab("Date")
  
  
##----------------------------------------------------------
## Exercise3333--------------------------------------------
  
rm(list=ls()) ## clear data and variables  

##---------------------------------------------------------------
## Monte Carlo Simulation
##---------------------------------------------------------------
S  = 5000
R1 = rnorm(S, 5, 10)  ## mean = 5, standard deviation = 10 (variance = 10 x 10) 
R2 = rnorm(S, 2, 4)   ## mean = 2, standard deviation = 4  (variance = 4 x 4)

## distribution  
hist(R1)
hist(R2)
hist(R)

## R1
mean(R1)
var(R1)
quantile(R1, probs = 0.05)

## R2
mean(R2)
var(R2)
quantile(R2, probs = 0.05)

R = 0.5 * R1 + 0.5 * R2

## R 
mean(R)
var(R)
quantile(R, probs = 0.05)


##---------------------------------------------------------------
## Data Analysis 
##---------------------------------------------------------------
## - This package contains data sets from ISLR book.
library(ISLR)

## variables in the data set 
names(Hitters)

## summary
summary(Hitters)
summary(Hitters$Salary)

## mean (problem "NA")  
mean(Hitters$Salary)

## Remove "NA"
DATA = na.omit(Hitters)

## mean and variance 
xbar = mean(DATA$Salary)
sig2 = var(DATA$Salary)
xbar
sig2

# nonparametric bootstrap
B   = 5000
mub = c()
for (b in 1:B){
  samp_b = sample.int(nrow(DATA), replace=TRUE)
  mub    = c(mub, mean(DATA$Salary[samp_b]))
}

## histogram  
hist(mub)
sd(mub)


##=================================================
## Exercise44444------------------------------------


library(MASS)
DATA = MASS::bacteria

summary(DATA)

## y presence or absence: a factor with levels n and y.
## ap active/placebo: a factor with levels a and p.
## hilo hi/low compliance: a factor with levels hi amd lo.
## week numeric: week of test.
## ID subject ID: a factor.
## trt a factor with levels placebo, drug and drug+, a re-coding of ap and hilo.

##----------------------------------------------------------
## Data 
##----------------------------------------------------------
DATA$outcome   = (DATA$y  == "y")
DATA$treatment = (DATA$ap == "a")
summary(DATA)

##----------------------------------------------------------
## Average Treatment Effect (ATE)
##----------------------------------------------------------
##-------------
## ATE  
##-------------
y1 = as.matrix(DATA$outcome[DATA$treatment==TRUE])  ## treated group 
y0 = as.matrix(DATA$outcome[DATA$treatment==FALSE])  ## control group 
y1.mean = mean(y1) 
y0.mean = mean(y0)
ATE     = y1.mean - y0.mean
ATE

##-------------
## Bootstrap   
##-------------
B     = 1000
ATE_B = c()
for (b in 1:B){
  samp_b0 = sample.int(nrow(y0), replace=TRUE)
  samp_b1 = sample.int(nrow(y1), replace=TRUE)
  ATE_b   = mean(y1[samp_b1]) - mean(y0[samp_b0])
  ATE_B   = c(ATE_B, ATE_b)
}

## Confidence Interval 
CI95 = quantile(ATE_B, c(0.025, 0.975))
CI95
  
##-------------
## regression  
##-------------
fit = glm(outcome ~ treatment, data = DATA)
summary(fit)


##=================================================
## Exercise5555------------------------------------


rm(list=ls()) ## clear data and variables  

##-------------------------------------------------
## Advertisement  
##-------------------------------------------------
## (1) data 
AD = read.csv("Advertising.csv") 
names(AD)
summary(AD)

## (2) scatter plot and simple linear regression 
## TV
plot(AD$TV,AD$sales)
fit.a = glm(sales~TV, data = AD)
summary(fit.a)
lines(AD$TV, fit.a$fitted.values) ##linear regression 

## radio 
plot(AD$radio,AD$sales)
fit.b = glm(sales~radio, data = AD)
summary(fit.b)
lines(AD$radio, fit.b$fitted.values)

## newspaper
plot(AD$newspaper,AD$sales)
fit.c = glm(sales~newspaper, data = AD)
summary(fit.c)
lines(AD$newspaper, fit.c$fitted.values)

## (2) regression (level-level) 
fit1 = glm(sales~TV + radio + newspaper, data = AD)
summary(fit1)

## (3) regression (log-level)  
fit2 = glm(log(sales)~TV + radio + newspaper, data = AD)
summary(fit2)

## (4) regression (log-log)  
fit3 = glm( log(sales)~ log(TV) + log(radio) + log(newspaper), data = AD)
summary(fit3)

fit3 = glm( log(sales)~ log(TV) + radio + log(newspaper), data = AD)
summary(fit3)

## - deviance => R2 
1-fit3$deviance / fit3$null.deviance

## (5) regression (level-log)  
fit4 = glm( sales~ log(TV) + radio + log(newspaper), data = AD)
summary(fit4)

## (6) R2
fit5 = lm( sales~ log(TV) + radio + log(newspaper), data = AD)
summary(fit5)




##=================================================
## Exercise6666------------------------------------
##-------------------------------------------------
## Credit card   
##-------------------------------------------------
## data 
library(ISLR)
summary(Default)

## logit 
fit.logit1 = glm(default ~ student, data = Default, family = "binomial")
summary(fit.logit1)

## logit 
fit.logit2 = glm(default ~ student + balance + income, data = Default, family = "binomial")
summary(fit.logit2)


##-------------------------------------------------
## Stock Return 
##-------------------------------------------------
DATA = read.csv("dja.csv")
dja  = DATA$DJ
n    = length(dja)  ## the size of time series 
n
## Stock price  
plot(dja, type="l", col=4, xlab="day", ylab="DJA")
acf(dja, lwd=2)
acf(dja, plot=FALSE)
ARdj = glm(dja[2:n] ~ dja[1:(n-1)])
summary(ARdj)

## Stock Return: AR(1) model with returns 
returns = (dja[2:n]-dja[1:(n-1)])/dja[1:(n-1)]
plot(returns, type="l", col=3, xlab="day", ylab="DJA Return")
acf(returns, lwd=2)
summary( glm(returns[2:n] ~ returns[1:(n-1)]) )



##=================================================
## Exercise7777------------------------------------
##-------------------------------------------------

## clear data and variables  
rm(list=ls())

## packages 
library(gamlr) ## package for lasso and AICc 
library(boot)  ## for cross-validation 

##-------------------------------------------------
## Bias-variance tradeoff 
##-------------------------------------------------
## (1) data generating process 
set.seed(2020)
n = 100 ## sampl size 
x = seq(from=1, to=n) ##序列( from, from+/-1, ..., to)
y = -50 + x - 0.01 * x^2 + 3 * rnorm(n) ## DGP

DATA = data.frame(x, y)
names(DATA)
summary(DATA)

## (2) plot 
plot(x, y, cex=1) ##100scale
plot(x, y, type="o", cex=1, lwd=1) ## connecting dots 

## (3) regression 
res1 = glm(y~x)
res2 = glm(y~poly(x,2) )
res3 = glm(y~poly(x,3) )
res4 = glm(y~poly(x,4) )

## (4) R2
1 - res1$deviance / res1$null.deviance
1 - res2$deviance / res2$null.deviance
1 - res3$deviance / res3$null.deviance
1 - res4$deviance / res4$null.deviance

## (5) IC 
c( AIC(res1),  AIC(res2),  AIC(res3), AIC(res4) )
c( AICc(res1), AICc(res2), AICc(res3), AICc(res4) )
c( BIC(res1),  BIC(res2),  BIC(res3), BIC(res4))

## (6) fit 
plot(x, y, cex=1)
lines(x, res1$fitted.values)
lines(x, res2$fitted.values, col="green")
lines(x, res3$fitted.values, col="blue")
lines(x, res4$fitted.values, col="red")

##-------------------------------------------------
## Data analysis: orange juce  
##-------------------------------------------------
## (1) data 
oj = read.csv("oj.csv") 
head(oj)
summary(oj)

## (2) Models 
fit1 = glm(log(sales) ~ log(price),                data=oj)
fit2 = glm(log(sales) ~ log(price) + brand,        data=oj)
fit3 = glm(log(sales) ~ log(price) * brand ,       data=oj)
fit4 = glm(log(sales) ~ log(price) * brand * feat, data=oj)

## (3) Cross-validation 
cv1 = cv.glm(oj, fit1, K=5)
cv2 = cv.glm(oj, fit2, K=5)
cv3 = cv.glm(oj, fit3, K=5)
cv4 = cv.glm(oj, fit4, K=5)

c( cv1$delta[1], cv2$delta[1], cv3$delta[1], cv4$delta[1])

## (4) IC
c( AIC(fit1),  AIC(fit2),  AIC(fit3),  AIC(fit4)  )
c( AICc(fit1), AICc(fit2), AICc(fit3), AICc(fit4) )
c( BIC(fit1),  BIC(fit2),  BIC(fit3),  BIC(fit4)  )

## (5) Forward stepwise procedure 是一种逐步回归的类型，它从一个空模型开始，然后逐个添加变量。在每个前进的步骤中，都将添加一个变量。
## null model
null = glm(log(sales) ~ 1, data = oj)
fwd  = step(null, scope=formula(fit4), dir="forward")
length(coef(fwd)) 
length(coef(fit4))

## (6) LASSO  
## regressors and dependent variables for the full model (fit4)
mat.reg   = sparse.model.matrix(log(sales) ~ log(price) * brand * feat, data=oj)[,-1] # do -1 to drop intercept!
vec.y     = log(oj$sales)
fit.lasso = gamlr(mat.reg, vec.y)
plot(fit.lasso) # path plot 

## AICc for lasso 
beta.aicc = coef(fit.lasso)  ## gamlr uses AICc by default 
sum(beta.aicc !=0 )          ## how many non-zero parameters? 
beta.aicc ##parameter name
AICseg = which.min( AICc(fit.lasso) )
log(fit.lasso$lambda[AICseg])  ## log(lambda)

## BIC for lasso
BICseg   = which.min( BIC(fit.lasso) )
beta.bic = coef(fit.lasso, s=BICseg)
sum(beta.bic!=0)                ## 
log(fit.lasso$lambda[BICseg] )  ## log(lambda)


##==================================================
## Exercise88888------------------------------------
##==================================================
rm(list = ls()) ## clear 

##------------------------------------------------
## K-NN: credit 
##------------------------------------------------
## data: German credit data
credit = read.csv("credit.csv")
set.seed(123) ## seed for random numbers 

## boxplot  
boxplot(duration ~ Default, data = credit)
boxplot(amount   ~ Default, data = credit)

## convert columns to mean-zero sd-one
x = scale(credit[,c("duration", "amount")]) # column 10 is the class label
apply(x,2,sd)        # 2=colum,x按照列计算sd

## k-nn
library(class)

## Step 1: split 
n    = nrow(credit)        ## the full smaple size 
test = sample(1:n, 0.10*n) ## randomly select 10% observations  
table(credit[test,]$Default)

## Step 2: estimation 
nn1 = knn(train=x[-test,], test=x[test,], cl=credit$Default[-test], k=1)
nn5 = knn(train=x[-test,], test=x[test,], cl=credit$Default[-test], k=5)

## how many defaults from K-NN prediction 
table(nn1)
table(nn5)

## compare 
data.frame(credit$Default[test], nn1, nn5)

## 2 x 2 matrix 
mat1 = table(nn1,credit$Default[test])
mat5 = table(nn5,credit$Default[test])

mat1
mat5

## False positive rate 
FPR1 = mat1[2,1] / (mat1[1,1] + mat1[2,1])
FPR5 = mat5[2,1] / (mat5[1,1] + mat5[2,1])

## False Negavie rate 
FNR1 = mat1[1,2] / (mat1[1,2] + mat1[2,2])
FNR5 = mat5[1,2] / (mat5[1,2] + mat5[2,2])

c(FPR1, FPR5)  ## False Positive Rate
c(FNR1, FNR5)  ## False Negative Rate 

##------------------------------------------------
## Lasso for spam email  
##------------------------------------------------
rm(list = ls()) ## clear 

library(gamlr)
source("roc.R")
set.seed(12345)

## data 
email = read.csv("spam.csv")

## summary stat and variables  
summary(email)
names(email)  

##-----------
## Lasso 
##-----------
## Step 1: define x and y
x = sparse.model.matrix(spam ~ ., data = email)[,-1]
y = email$spam

n    = nrow(email)             ## sample size 
test = sample.int(n, 0.5*n)    ## 50-50 split

## Step 2: estimation 
fit    = gamlr(x[-test,], y[-test], family = "binomial")
fit.cv = cv.gamlr(x[-test,], y[-test], family="binomial", verb=TRUE)

## figure 
plot(fit)
plot(fit.cv)

sum( coef(fit.cv, s="min") != 0) # min
sum( coef(fit)    != 0) # AICc

##-----------------------
## ROC with out-of-sample 
##-----------------------
## out-of-sample and actural outcomes 
y.pred = predict(fit, x[test,], type = "response")
y.act  = email$spam[test]

## ROC
roc(p = y.pred, y = y.act, bty = "n", main = "out-of-sample")  
